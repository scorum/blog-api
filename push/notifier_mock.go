// Code generated by MockGen. DO NOT EDIT.
// Source: push/notifier.go

// Package push is a generated GoMock package.
package push

import (
	gomock "github.com/golang/mock/gomock"
	db "gitlab.scorum.com/blog/api/db"
	reflect "reflect"
)

// MockNotifier is a mock of Notifier interface
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// NotifyPostReplied mocks base method
func (m *MockNotifier) NotifyPostReplied(meta db.PostRelatedNotificationMeta) {
	m.ctrl.Call(m, "NotifyPostReplied", meta)
}

// NotifyPostReplied indicates an expected call of NotifyPostReplied
func (mr *MockNotifierMockRecorder) NotifyPostReplied(meta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyPostReplied", reflect.TypeOf((*MockNotifier)(nil).NotifyPostReplied), meta)
}

// NotifyPostVoted mocks base method
func (m *MockNotifier) NotifyPostVoted(meta db.PostRelatedNotificationMeta) {
	m.ctrl.Call(m, "NotifyPostVoted", meta)
}

// NotifyPostVoted indicates an expected call of NotifyPostVoted
func (mr *MockNotifierMockRecorder) NotifyPostVoted(meta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyPostVoted", reflect.TypeOf((*MockNotifier)(nil).NotifyPostVoted), meta)
}

// NotifyCommentReplied mocks base method
func (m *MockNotifier) NotifyCommentReplied(to string, meta db.PostRelatedNotificationMeta) {
	m.ctrl.Call(m, "NotifyCommentReplied", to, meta)
}

// NotifyCommentReplied indicates an expected call of NotifyCommentReplied
func (mr *MockNotifierMockRecorder) NotifyCommentReplied(to, meta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyCommentReplied", reflect.TypeOf((*MockNotifier)(nil).NotifyCommentReplied), to, meta)
}

// NotifyStartedFollow mocks base method
func (m *MockNotifier) NotifyStartedFollow(account, who string) {
	m.ctrl.Call(m, "NotifyStartedFollow", account, who)
}

// NotifyStartedFollow indicates an expected call of NotifyStartedFollow
func (mr *MockNotifierMockRecorder) NotifyStartedFollow(account, who interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyStartedFollow", reflect.TypeOf((*MockNotifier)(nil).NotifyStartedFollow), account, who)
}

// NotifyCommentVoted mocks base method
func (m *MockNotifier) NotifyCommentVoted(to string, meta db.PostRelatedNotificationMeta) {
	m.ctrl.Call(m, "NotifyCommentVoted", to, meta)
}

// NotifyCommentVoted indicates an expected call of NotifyCommentVoted
func (mr *MockNotifierMockRecorder) NotifyCommentVoted(to, meta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyCommentVoted", reflect.TypeOf((*MockNotifier)(nil).NotifyCommentVoted), to, meta)
}

// NotifyPostFlagged mocks base method
func (m *MockNotifier) NotifyPostFlagged(meta db.PostRelatedNotificationMeta) {
	m.ctrl.Call(m, "NotifyPostFlagged", meta)
}

// NotifyPostFlagged indicates an expected call of NotifyPostFlagged
func (mr *MockNotifierMockRecorder) NotifyPostFlagged(meta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyPostFlagged", reflect.TypeOf((*MockNotifier)(nil).NotifyPostFlagged), meta)
}

// NotifyCommentFlagged mocks base method
func (m *MockNotifier) NotifyCommentFlagged(to string, meta db.PostRelatedNotificationMeta) {
	m.ctrl.Call(m, "NotifyCommentFlagged", to, meta)
}

// NotifyCommentFlagged indicates an expected call of NotifyCommentFlagged
func (mr *MockNotifierMockRecorder) NotifyCommentFlagged(to, meta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyCommentFlagged", reflect.TypeOf((*MockNotifier)(nil).NotifyCommentFlagged), to, meta)
}
